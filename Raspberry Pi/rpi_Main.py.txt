# Raspberry Pi Main
# Relevant Files: AndroidConnection, ArduinoConnection, PcConnection 

from AndroidConnection import *
from ArduinoConnection import *
from PcConnection import *
from multiprocessing import Process, Value, Queue, Manager
from datetime import datetime
from picamera import PiCamera
from picamera.array import PiRGBArray

import sys
import threading
import time
import imagezmq

class rpi_Main(threading.Thread):
    image_queue = Manager().Queue()

    #Initialization
    def __init__(self):
        threading.Thread.__init__(self)
        self.debug = False

        self.android_thread = AndroidConnection()
        self.pc_thread = PcConnection()
        self.arduino_thread = ArduinoConnection()

        self.android_thread.initialize_bluetooth_connection()
        self.pc_thread.initialize_pc_connection()
        self.arduino_thread.initialize_serial_connection()
        
        self.manager = Manager()
        #self.image_handler = ImageHandler()
        self.image_queue = self.manager.Queue()
        self.image_count = Value('i',0)
        self.image_process = Process(target=self._process_pic)
        time.sleep(2)
        

    # Android Section
    
    def writeToAndroid(self,ANmsgWrite):
        if (self.android_thread.bluetooth_connection_status() and ANmsgWrite):            
            self.android_thread.Android_write(ANmsgWrite)
            
            return True
        return False

    def readFromAndroid(self):
        while True:
            ANmsgRead = self.android_thread.Android_read()
            ANmsgRead = str(ANmsgRead)
            ANmsgArray = ANmsgRead.split(",")
            header = (ANmsgArray[0])
            
            if (self.android_thread.bluetooth_connection_status() and ANmsgRead != "None"):
                if(header == 'PC'):
                    self.writeToPc(ANmsgArray[1])
                elif(header == 'AR'):
                    self.writeToArduino(ANmsgArray[1])
                else:
                    print("No such header. Please check message: %s" %(header))


    #Arduino Section
        
    def writeToArduino(self, ARmsgWrite):
        if (self.arduino_thread.arduino_connection_status() and ARmsgWrite):
            self.arduino_thread.Arduino_write(ARmsgWrite)
            return True
        return True
    
    def readFromArduino(self):
        while True:
            ARmsgRead = self.arduino_thread.Arduino_read()
            ARmsgArray = ARmsgRead.split(",")
            header = ARmsgArray[0]
            header = header.lstrip()
  
            if (self.arduino_thread.arduino_connection_status() and ARmsgRead):
               self.sendtopc(ARmsgArray[0])

    #PC Section
                 
    def writeToPc(self, PCmsgWrite):
        if (self.pc_thread.pc_connection_status() and PCmsgWrite):
            self.pc_thread.PC_write(PCmsgWrite)
            
            return True
        return False

    def readFromPc(self):
            while True:
                PCmsgRead = self.pc_thread.PC_read()
                for each in PCmsgRead:
                    each = str(each)
                    if (each == ''):
                        continue
                    PCmsgArray = each.split("!")
                    header = PCmsgArray[0]
                    if (self.pc_thread.pc_connection_status() and each):
                        if (header == 'AN'):
                            self.writeToAndroid(PCmsgArray[1] + '\n')
                        elif(header == 'AR'):
                            self.writeToArduino(PCmsgArray[1] + '\n')
                        elif (PCmsgArray[1][0] == 'P'):
                            print(PCmsgArray[1][0])
                            image = self._take_pic()
                            self.image_queue.put_nowait([image,PCmsgArray[1]])
                            print('Picture taken')
                            if self.image_count.value >= 5:
                                self.sendtopc('Image Recognition Done!')
                        else:
                            print("No such header. Please check message: %s" % PCmsgRead)

    


    # Multi-Threading
    
    def initilaize_threads(self):        
        #Android read and write thread
        AndroidRead_thread = threading.Thread(target = self.readFromAndroid, args = (), name = "AndroidRead_thread")
        AndroidWrite_thread = threading.Thread(target = self.writeToAndroid, args = (), name = "AndroidWrite_thread")

        #Arduino read and write thread
        ArduinoRead_thread = threading.Thread(target = self.readFromArduino, args = (), name = "ArduinoRead_thread")
        ArduinoWrite_thread = threading.Thread(target = self.writeToArduino, args = (), name = "ArduinoWrite_thread")

        #PC read and write thread
        PCRead_thread = threading.Thread(target = self.readFromPc, args = (), name = "PCRead_thread")
        PCWrite_thread = threading.Thread(target = self.writeToPc, args = (), name = "PCWrite_thread")

        #Set daemon for all threads
        AndroidRead_thread.daemon = True
        AndroidWrite_thread.daemon = True

        ArduinoRead_thread.daemon = True
        ArduinoWrite_thread.daemon = True

        PCRead_thread.daemon = True
        PCWrite_thread.daemon = True

        #Start threads for Android, Arduino, PC
        AndroidRead_thread.start()
        ArduinoRead_thread.start()
        PCRead_thread.start()


    #Terminate all connections
        
    def terminate(self):
        self.android_thread.terminateBluetooth()
        self.arduino_thread.terminateSerial()
        self.pc_thread.close_PcSockets()

    def maintain(self):
        while True:
            time.sleep(1)

    #Image Recognition Section
    
    def _take_pic(self):
        start_time = datetime.now()

        # initialize the camera and grab a reference to the raw camera capture
        camera = PiCamera(resolution=(1920, 1080))  # '1920x1080'
        rawCapture = PiRGBArray(camera)
            
        # allow the camera to warmup
        time.sleep(0.1)
            
        # grab an image from the camera
        camera.capture(rawCapture, format='bgr')
        image = rawCapture.array
        camera.close()

        print('Time taken to take picture: ' + str(datetime.now() - start_time) + 'seconds')
            
        # to gather training images
        # os.system("raspistill -o images/test"+
        # str(start_time.strftime("%d%m%H%M%S"))+".png -w 1920 -h 1080 -q 100")
            
        return image

    def _process_pic(self):
        # initialize the ImageSender object with the socket address of the server
        image_sender = imagezmq.ImageSender(
            connect_to='tcp://192.168.15.2:5555')
        image_id_list = []
        while True:
            try:
                if not self.image_queue.empty():
                    start_time = datetime.now()
                    
                    image_message = self.image_queue.get_nowait()
                    # format: 'x,y|x,y|x,y'
                    obstacle_coordinates = image_message[1]
                    
                    reply = image_sender.send_image(
                        'image from RPi', 
                        image_message[0]
                    )
                    reply = reply.decode('utf-8')

                    if reply == 'End':
                        break  # stop sending images
                    
                    # example replies
                    # "1|2|3" 3 symbols in order from left to right
                    # "1|-1|3" 2 symbols, 1 on the left, 1 on the right
                    # "1" 1 symbol either on the left, middle or right
                    else:
                        detections = reply.split('|')
                        obstacle_coordinate_list = obstacle_coordinates.split('|')

                        for detection, coordinates in zip(detections, obstacle_coordinate_list):
                            
                            if coordinates == '-1,-1':
                                continue  # if no obstacle, skip mapping of symbol id
                            elif detection == '-1':
                                continue  # if no symbol detected, skip mapping of symbol id
                            else:
                                x = coordinates.split(',')[0]
                                y = coordinates.split(',')[1]
                                id_string_to_android_complete = []
                                id_string_to_android = '{id:' + detection + ',' + 'x:' + x + 'y:' + y + '}'
                                id_string_to_android_complete += id_string_to_android
                                print(id_string_to_android)
                                
                                if detection not in image_id_list:
                                    self.image_count.value += 1
                                    image_id_list.put_nowait(detection)

                    self.sendtoandroid('{"images":{' + ','.join(id_string_to_android_complete) + '}' + '\n'.encode())
                    print('Time taken to process image: ' + \
                        str(datetime.now() - start_time) + ' seconds')

            except Exception as error:
                print('Image processing failed: ' + str(error))


if __name__ == "__main__":
    print("Program is Starting..")
    main = rpi_Main()

    try:
        main.initilaize_threads()
        main.maintain()
    except KeyboardInterrupt:
        print("Program is Ending..")
        main.terminate()

